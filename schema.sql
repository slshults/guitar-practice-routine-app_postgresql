-- Guitar Practice Routine App - PostgreSQL Database Schema
-- This file creates all tables required for the application

-- Practice items (exercises, songs, techniques)
CREATE TABLE items (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    item_id VARCHAR(50),
    title VARCHAR(255) NOT NULL,
    notes TEXT,
    duration VARCHAR(50),
    description TEXT,
    "order" INTEGER DEFAULT 0,
    tuning VARCHAR(50),
    songbook VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Practice routines metadata
CREATE TABLE routines (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "order" INTEGER DEFAULT 0
);

-- Junction table for routine-item relationships
CREATE TABLE routine_items (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    routine_id INTEGER NOT NULL REFERENCES routines(id),
    item_id INTEGER NOT NULL REFERENCES items(id),
    "order" INTEGER DEFAULT 0,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Chord diagrams with section metadata
CREATE TABLE chord_charts (
    chord_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    item_id VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    chord_data JSON NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    order_col INTEGER DEFAULT 0
);

-- Tracks currently active routine
CREATE TABLE active_routine (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    routine_id INTEGER REFERENCES routines(id),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Common chords database (12,700+ predefined chord patterns)
CREATE TABLE common_chords (
    id INTEGER PRIMARY KEY,
    type TEXT,
    name TEXT,
    chord_data JSON,
    created_at TIMESTAMP WITH TIME ZONE,
    order_col INTEGER,
    unused1 TEXT,
    unused2 TEXT
);

-- Create indexes for performance
CREATE INDEX idx_items_item_id ON items(item_id);
CREATE INDEX idx_items_title ON items(title);
CREATE INDEX idx_items_title_order ON items(title, "order");
CREATE INDEX idx_items_tuning ON items(tuning);

CREATE INDEX idx_routines_name ON routines(name);
CREATE INDEX idx_routines_order ON routines("order");

CREATE INDEX idx_routine_items_routine_id ON routine_items(routine_id);
CREATE INDEX idx_routine_items_item_id ON routine_items(item_id);
CREATE INDEX idx_routine_items_order ON routine_items("order");
CREATE INDEX idx_routine_items_routine_order ON routine_items(routine_id, "order");
CREATE INDEX idx_routine_items_completion ON routine_items(routine_id, completed);

CREATE INDEX idx_chord_charts_item_id ON chord_charts(item_id);
CREATE INDEX idx_chord_charts_title ON chord_charts(title);
CREATE INDEX idx_chord_charts_item_order ON chord_charts(item_id, order_col);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically update updated_at on items table
CREATE TRIGGER update_items_updated_at
    BEFORE UPDATE ON items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Trigger to automatically update updated_at on active_routine table
CREATE TRIGGER update_active_routine_updated_at
    BEFORE UPDATE ON active_routine
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();